---
import Caret from "@components/icons/Caret.astro";

interface Props {
	parentSlug: string;
	slug: string;
	text: string;
	depth?: number;
	first?: boolean;
}

const { parentSlug, slug, text, first, depth = 1 } = Astro.props;
---

<a href={`/${parentSlug}/#${slug}`} style={`margin-left: ${10 + 5 * depth}px;`}>
	<sub-link data-first={first} data-slug={"#" + slug} class="flex flex-row items-center">
		<Caret class="caret w-4 h-4" />
		{text}
	</sub-link>
</a>

<script>
	import { createSelector, hash } from "src/nano";
	let firstRun = true;
	requestAnimationFrame(() => (firstRun = false));
	const hashSelector = createSelector(hash);

	class Sublink extends HTMLElement {
		constructor() {
			super();
			if (!firstRun) return; // second run => navigate, but since we persist navigation element we dont want to run setup just for the component ot be replaced
			const l = (v: boolean) => {
				this.toggleAttribute("selected", v);
			};
			hashSelector(this.dataset.slug!, l);
			if (typeof this.dataset.first === "string") hashSelector("", l);
		}
	}

	customElements.define("sub-link", Sublink);
</script>

<style>
	sub-link .caret {
		opacity: 0;
	}
</style>

<style is:global>
	collapsible-link[selected] sub-link[selected] {
		color: green;
	}

	collapsible-link[selected] sub-link[selected] .caret {
		opacity: 1;
	}
</style>
