---
import { getCollection } from "astro:content";
import CollapsibleLink from "./CollapsibleLink.astro";

function sort<T extends { id: string }>(a: T, b: T): number {
	return a.id.localeCompare(b.id);
}

const docs = await getCollection("docs");

const intro = docs.find((e) => e.id === "intro")!;
const reference = docs.find((e) => e.id === "reference")!;
const authentication = docs.find((e) => e.id === "authentication")!;
const typography = docs.find((e) => e.id === "typography")!;

const resources = docs.filter((e) => e.id.startsWith("resources/")).sort(sort);
const topics = docs.filter((e) => e.id.startsWith("topics/")).sort(sort);
const remote_authentication = docs.filter((e) => e.id.startsWith("remote-authentication/")).sort(sort);
const interactions = docs.filter((e) => e.id.startsWith("interactions/")).sort(sort);
---

<section class="mb-6">
	<CollapsibleLink entry={intro} noSub />
	<CollapsibleLink entry={reference} />
	<CollapsibleLink entry={authentication} />
	<CollapsibleLink entry={typography} />
</section>
{
	[resources, topics, remote_authentication, interactions].map((collection) => (
		<section class="mb-6">
			<h3 class="mb-2 ml-2 text-black dark:text-white font-whitney-bold text-xs uppercase">{collection[0].id.split("/")[0]}</h3>
			{collection.map((e) => (
				<CollapsibleLink entry={e} />
			))}
		</section>
	))
}
