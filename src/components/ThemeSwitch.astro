---
import Gear from "./icons/Gear.astro";
import Sun from "./icons/Sun.astro";
import Moon from "./icons/Moon.astro";
---

<theme-switch class="text-black dark:text-white">
	<svg class="icons" width="16px" height="16px">
		<Sun class="light" width="16px" height="16px" style={{ display: "none" }} />
		<Moon class="dark" width="16px" height="16px" style={{ display: "none" }} />
		<Gear class="system" width="16px" height="16px" style={{ display: "block" }} />
	</svg>
	<select value="system" aria-label="Dark or Lightmode">
		<option value="light">Light</option>
		<option value="dark">Dark</option>
		<option value="system">System</option>
	</select>
</theme-switch>

<script>
	import { userTheme } from "src/nano";

	class ThemeSwitch extends HTMLElement {
		constructor() {
			super();

			const s = this.querySelector("select");
			const i = this.querySelector(".icons");
			if (!s || !i) throw new Error("Select/Icons not found");

			const idx = {
				light: 0,
				dark: 1,
				system: 2,
			};

			i.children[idx["system"]]?.setAttribute("style", "display: none");
			(s as HTMLSelectElement).value = userTheme.get();
			i.children[idx[userTheme.get()]]?.setAttribute("style", "display: block");

			s.addEventListener("change", (e) => {
				const value = (e.target as HTMLSelectElement).value as "light" | "dark" | "system";
				i.children[idx[userTheme.get()]]?.setAttribute("style", "display: none");
				userTheme.set(value);
				i.children[idx[value]]?.setAttribute("style", "display: block");
			});
		}
	}

	customElements.define("theme-switch", ThemeSwitch);
</script>

<style>
	select {
		appearance: none;
		font-size: 14px;
		border-radius: 4px;
		padding: 8px 26px;
		color: var(--accent-primary);
		background-color: var(--background-primary);
	}

	.icons {
		margin-right: -22px;
		z-index: 1;
		pointer-events: none;
		width: 16px;
		height: 16px;
	}

	theme-switch {
		display: flex;
		flex-direction: row;
		align-items: center;
		cursor: pointer;
	}

	option {
		color: black;
	}
</style>
