name: Deploy

on:
  push:
  pull_request_target:

# Runs do not need to be concurrent
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    permissions:
      deployments: write

    if: github.event_name != 'pull_request_target' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name

    runs-on: ubuntu-latest
    name: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: "pnpm"

      - name: Install and Build Artifacts
        run: |
          # Prevent supply chain attack by installing packages before pulling PR
          pnpm install

          # Pull the PR branch if necessary
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            git fetch origin "pull/${{ github.event.number }}/head:pull/${{ github.event.number }}/head"
            git switch "pull/${{ github.event.number }}/head"
          fi

          pnpm build:cf

      - name: Deploy Site
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy --branch ${{ github.event_name == 'pull_request_target' && format('pr-{0}', github.event.number) || github.ref_name }}

      - name: Notify Deployment
        uses: actions/github-script@v7
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

          PROJECT_NAME: "discord-userdoccers"

          DEPLOYMENT_DESCRIPTION: ${{ github.event_name == 'push' &&  github.event.head_commit.message || github.event.pull_request.title }}
        with:
          script: |
            const { CLOUDFLARE_ACCOUNT_ID, PROJECT_NAME } = process.env;

            const DEPLOYMENT_ENVIRONMENT = "${{ steps.deploy.outputs.pages-environment }}";
            const DEPLOYMENT_URL = "${{ steps.deploy.outputs.deployment-url }}";
            const DEPLOYMENT_ALIAS_URL = "${{ steps.deploy.outputs.pages-deployment-alias-url }}" || "https://docs.discord.food";
            const DEPLOYMENT_ID = "${{ steps.deploy.outputs.pages-deployment-id }}";
            const DEPLOYMENT_DESCRIPTION = process.env.DEPLOYMENT_DESCRIPTION;

            const envConfig = {
              production: {
                environment: "Production",
                production: true,
                description: DEPLOYMENT_DESCRIPTION,
              },
              preview: {
                environment: "Preview",
                production: false,
                description: DEPLOYMENT_DESCRIPTION,
              },
            };

            const { environment, production: production_environment, description } = envConfig[DEPLOYMENT_ENVIRONMENT];

            const deploymentRef = context.eventName === "pull_request_target"
              ? context.payload.pull_request.head.sha
              : context.sha;

            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: deploymentRef,
              environment,
              production_environment,
              description,
              required_contexts: [],
              auto_merge: false,
              payload: context.eventName === "pull_request_target"
                        ? { pull_request: context.payload.number }
                        : { }
            });

            if (deployment.status !== 201) {
              core.error(deployment.data.message ?? "error creating deployment", {
                title: "Deployment Failed",
              });

              return;
            }

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment,
              production_environment,
              description,
              deployment_id: deployment.data.id,
              environment_url: DEPLOYMENT_URL,
              log_url: `https://dash.cloudflare.com/${CLOUDFLARE_ACCOUNT_ID}/pages/view/${PROJECT_NAME}/${DEPLOYMENT_ID}`,
              state: "success",
              auto_inactive: false,
            });

            await core.summary
              .addRaw(
                `# ${environment} Deployment

            | Name                           | Result                  |
            | ------------------------------ | ----------------------- |
            | **Last commit:**               | ${deploymentRef}        |
            | **${environment} URL**:        | ${DEPLOYMENT_URL}       |
            | **Branch ${environment} URL**: | ${DEPLOYMENT_ALIAS_URL} |`,
              )
              .write();
